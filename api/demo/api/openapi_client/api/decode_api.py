# coding: utf-8

"""
    Kaldi Customization Server

    Kaldi Customization Server.  # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (
    ApiTypeError,
    ApiValueError
)


class DecodeApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def assign_audio_to_current_session(self, project_uuid, training_version, audio_reference_object, **kwargs):  # noqa: E501
        """Assign Audio to decoding session  # noqa: E501

        Assign audio to current decoding session  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_audio_to_current_session(project_uuid, training_version, audio_reference_object, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project_uuid: UUID of the project (required)
        :param int training_version: Training version of the project (required)
        :param AudioReferenceObject audio_reference_object: Audio that needs to be decoded (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DecodeAudio
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.assign_audio_to_current_session_with_http_info(project_uuid, training_version, audio_reference_object, **kwargs)  # noqa: E501

    def assign_audio_to_current_session_with_http_info(self, project_uuid, training_version, audio_reference_object, **kwargs):  # noqa: E501
        """Assign Audio to decoding session  # noqa: E501

        Assign audio to current decoding session  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_audio_to_current_session_with_http_info(project_uuid, training_version, audio_reference_object, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project_uuid: UUID of the project (required)
        :param int training_version: Training version of the project (required)
        :param AudioReferenceObject audio_reference_object: Audio that needs to be decoded (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DecodeAudio, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['project_uuid', 'training_version', 'audio_reference_object']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assign_audio_to_current_session" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project_uuid' is set
        if ('project_uuid' not in local_var_params or
                local_var_params['project_uuid'] is None):
            raise ApiValueError("Missing the required parameter `project_uuid` when calling `assign_audio_to_current_session`")  # noqa: E501
        # verify the required parameter 'training_version' is set
        if ('training_version' not in local_var_params or
                local_var_params['training_version'] is None):
            raise ApiValueError("Missing the required parameter `training_version` when calling `assign_audio_to_current_session`")  # noqa: E501
        # verify the required parameter 'audio_reference_object' is set
        if ('audio_reference_object' not in local_var_params or
                local_var_params['audio_reference_object'] is None):
            raise ApiValueError("Missing the required parameter `audio_reference_object` when calling `assign_audio_to_current_session`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_uuid' in local_var_params:
            path_params['project_uuid'] = local_var_params['project_uuid']  # noqa: E501
        if 'training_version' in local_var_params:
            path_params['training_version'] = local_var_params['training_version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'audio_reference_object' in local_var_params:
            body_params = local_var_params['audio_reference_object']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/project/{project_uuid}/training/{training_version}/decode', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DecodeAudio',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_decode_session(self, project_uuid, training_version, **kwargs):  # noqa: E501
        """Create a new decoding session  # noqa: E501

        Create a new decoding session  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_decode_session(project_uuid, training_version, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project_uuid: UUID of the project (required)
        :param int training_version: Training version of the project (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DecodeSession
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.create_decode_session_with_http_info(project_uuid, training_version, **kwargs)  # noqa: E501

    def create_decode_session_with_http_info(self, project_uuid, training_version, **kwargs):  # noqa: E501
        """Create a new decoding session  # noqa: E501

        Create a new decoding session  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_decode_session_with_http_info(project_uuid, training_version, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project_uuid: UUID of the project (required)
        :param int training_version: Training version of the project (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DecodeSession, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['project_uuid', 'training_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_decode_session" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project_uuid' is set
        if ('project_uuid' not in local_var_params or
                local_var_params['project_uuid'] is None):
            raise ApiValueError("Missing the required parameter `project_uuid` when calling `create_decode_session`")  # noqa: E501
        # verify the required parameter 'training_version' is set
        if ('training_version' not in local_var_params or
                local_var_params['training_version'] is None):
            raise ApiValueError("Missing the required parameter `training_version` when calling `create_decode_session`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_uuid' in local_var_params:
            path_params['project_uuid'] = local_var_params['project_uuid']  # noqa: E501
        if 'training_version' in local_var_params:
            path_params['training_version'] = local_var_params['training_version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/project/{project_uuid}/training/{training_version}/decode/session', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DecodeSession',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_audio_by_uuid(self, audio_uuid, **kwargs):  # noqa: E501
        """Delete audio by UUID  # noqa: E501

        Delete a single audio resource  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_audio_by_uuid(audio_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str audio_uuid: UUID of audio to delete (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_audio_by_uuid_with_http_info(audio_uuid, **kwargs)  # noqa: E501

    def delete_audio_by_uuid_with_http_info(self, audio_uuid, **kwargs):  # noqa: E501
        """Delete audio by UUID  # noqa: E501

        Delete a single audio resource  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_audio_by_uuid_with_http_info(audio_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str audio_uuid: UUID of audio to delete (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['audio_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_audio_by_uuid" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'audio_uuid' is set
        if ('audio_uuid' not in local_var_params or
                local_var_params['audio_uuid'] is None):
            raise ApiValueError("Missing the required parameter `audio_uuid` when calling `delete_audio_by_uuid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'audio_uuid' in local_var_params:
            path_params['audio_uuid'] = local_var_params['audio_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/audio/{audio_uuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_decode_session(self, project_uuid, training_version, **kwargs):  # noqa: E501
        """Delete the decoding session  # noqa: E501

        Delete the active decoding session  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_decode_session(project_uuid, training_version, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project_uuid: UUID of the project (required)
        :param int training_version: Training version of the project (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_decode_session_with_http_info(project_uuid, training_version, **kwargs)  # noqa: E501

    def delete_decode_session_with_http_info(self, project_uuid, training_version, **kwargs):  # noqa: E501
        """Delete the decoding session  # noqa: E501

        Delete the active decoding session  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_decode_session_with_http_info(project_uuid, training_version, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project_uuid: UUID of the project (required)
        :param int training_version: Training version of the project (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['project_uuid', 'training_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_decode_session" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project_uuid' is set
        if ('project_uuid' not in local_var_params or
                local_var_params['project_uuid'] is None):
            raise ApiValueError("Missing the required parameter `project_uuid` when calling `delete_decode_session`")  # noqa: E501
        # verify the required parameter 'training_version' is set
        if ('training_version' not in local_var_params or
                local_var_params['training_version'] is None):
            raise ApiValueError("Missing the required parameter `training_version` when calling `delete_decode_session`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_uuid' in local_var_params:
            path_params['project_uuid'] = local_var_params['project_uuid']  # noqa: E501
        if 'training_version' in local_var_params:
            path_params['training_version'] = local_var_params['training_version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/project/{project_uuid}/training/{training_version}/decode/session', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_audio(self, **kwargs):  # noqa: E501
        """Returns a list of available audio  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_audio(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Audio]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_all_audio_with_http_info(**kwargs)  # noqa: E501

    def get_all_audio_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a list of available audio  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_audio_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Audio], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_audio" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/audio', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Audio]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_decode_sessions(self, project_uuid, training_version, **kwargs):  # noqa: E501
        """Get the all sessions  # noqa: E501

        Get the current decode session  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_decode_sessions(project_uuid, training_version, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project_uuid: UUID of the project (required)
        :param int training_version: Training version of the project (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[DecodeSession]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_all_decode_sessions_with_http_info(project_uuid, training_version, **kwargs)  # noqa: E501

    def get_all_decode_sessions_with_http_info(self, project_uuid, training_version, **kwargs):  # noqa: E501
        """Get the all sessions  # noqa: E501

        Get the current decode session  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_decode_sessions_with_http_info(project_uuid, training_version, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project_uuid: UUID of the project (required)
        :param int training_version: Training version of the project (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[DecodeSession], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['project_uuid', 'training_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_decode_sessions" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project_uuid' is set
        if ('project_uuid' not in local_var_params or
                local_var_params['project_uuid'] is None):
            raise ApiValueError("Missing the required parameter `project_uuid` when calling `get_all_decode_sessions`")  # noqa: E501
        # verify the required parameter 'training_version' is set
        if ('training_version' not in local_var_params or
                local_var_params['training_version'] is None):
            raise ApiValueError("Missing the required parameter `training_version` when calling `get_all_decode_sessions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_uuid' in local_var_params:
            path_params['project_uuid'] = local_var_params['project_uuid']  # noqa: E501
        if 'training_version' in local_var_params:
            path_params['training_version'] = local_var_params['training_version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/project/{project_uuid}/training/{training_version}/decode/session', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DecodeSession]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_audio_by_uuid(self, audio_uuid, **kwargs):  # noqa: E501
        """Find audio by UUID  # noqa: E501

        Returns a single audio resource  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_audio_by_uuid(audio_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str audio_uuid: UUID of audio to return (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Audio
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_audio_by_uuid_with_http_info(audio_uuid, **kwargs)  # noqa: E501

    def get_audio_by_uuid_with_http_info(self, audio_uuid, **kwargs):  # noqa: E501
        """Find audio by UUID  # noqa: E501

        Returns a single audio resource  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_audio_by_uuid_with_http_info(audio_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str audio_uuid: UUID of audio to return (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Audio, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['audio_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_audio_by_uuid" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'audio_uuid' is set
        if ('audio_uuid' not in local_var_params or
                local_var_params['audio_uuid'] is None):
            raise ApiValueError("Missing the required parameter `audio_uuid` when calling `get_audio_by_uuid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'audio_uuid' in local_var_params:
            path_params['audio_uuid'] = local_var_params['audio_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/audio/{audio_uuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Audio',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_audio_data(self, audio_uuid, **kwargs):  # noqa: E501
        """Returns the audio content  # noqa: E501

        Returns the audio content  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_audio_data(audio_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str audio_uuid: UUID of resource to return (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_audio_data_with_http_info(audio_uuid, **kwargs)  # noqa: E501

    def get_audio_data_with_http_info(self, audio_uuid, **kwargs):  # noqa: E501
        """Returns the audio content  # noqa: E501

        Returns the audio content  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_audio_data_with_http_info(audio_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str audio_uuid: UUID of resource to return (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(file, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['audio_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_audio_data" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'audio_uuid' is set
        if ('audio_uuid' not in local_var_params or
                local_var_params['audio_uuid'] is None):
            raise ApiValueError("Missing the required parameter `audio_uuid` when calling `get_audio_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'audio_uuid' in local_var_params:
            path_params['audio_uuid'] = local_var_params['audio_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['audio/wav'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/audio/{audio_uuid}/data', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_current_decode_session(self, project_uuid, training_version, **kwargs):  # noqa: E501
        """Get the current session  # noqa: E501

        Get the current decode session  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_current_decode_session(project_uuid, training_version, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project_uuid: UUID of the project (required)
        :param int training_version: Training version of the project (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DecodeSession
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_current_decode_session_with_http_info(project_uuid, training_version, **kwargs)  # noqa: E501

    def get_current_decode_session_with_http_info(self, project_uuid, training_version, **kwargs):  # noqa: E501
        """Get the current session  # noqa: E501

        Get the current decode session  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_current_decode_session_with_http_info(project_uuid, training_version, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project_uuid: UUID of the project (required)
        :param int training_version: Training version of the project (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DecodeSession, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['project_uuid', 'training_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_current_decode_session" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project_uuid' is set
        if ('project_uuid' not in local_var_params or
                local_var_params['project_uuid'] is None):
            raise ApiValueError("Missing the required parameter `project_uuid` when calling `get_current_decode_session`")  # noqa: E501
        # verify the required parameter 'training_version' is set
        if ('training_version' not in local_var_params or
                local_var_params['training_version'] is None):
            raise ApiValueError("Missing the required parameter `training_version` when calling `get_current_decode_session`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_uuid' in local_var_params:
            path_params['project_uuid'] = local_var_params['project_uuid']  # noqa: E501
        if 'training_version' in local_var_params:
            path_params['training_version'] = local_var_params['training_version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/project/{project_uuid}/training/{training_version}/decode/session/current', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DecodeSession',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_decode_result(self, project_uuid, training_version, audio_uuid, **kwargs):  # noqa: E501
        """Get the result of a decoding task  # noqa: E501

        Returns the result of a decoding task  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_decode_result(project_uuid, training_version, audio_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project_uuid: UUID of the project (required)
        :param int training_version: Training version of the project (required)
        :param str audio_uuid: UUID of the audio (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DecodeAudio
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_decode_result_with_http_info(project_uuid, training_version, audio_uuid, **kwargs)  # noqa: E501

    def get_decode_result_with_http_info(self, project_uuid, training_version, audio_uuid, **kwargs):  # noqa: E501
        """Get the result of a decoding task  # noqa: E501

        Returns the result of a decoding task  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_decode_result_with_http_info(project_uuid, training_version, audio_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project_uuid: UUID of the project (required)
        :param int training_version: Training version of the project (required)
        :param str audio_uuid: UUID of the audio (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DecodeAudio, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['project_uuid', 'training_version', 'audio_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_decode_result" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project_uuid' is set
        if ('project_uuid' not in local_var_params or
                local_var_params['project_uuid'] is None):
            raise ApiValueError("Missing the required parameter `project_uuid` when calling `get_decode_result`")  # noqa: E501
        # verify the required parameter 'training_version' is set
        if ('training_version' not in local_var_params or
                local_var_params['training_version'] is None):
            raise ApiValueError("Missing the required parameter `training_version` when calling `get_decode_result`")  # noqa: E501
        # verify the required parameter 'audio_uuid' is set
        if ('audio_uuid' not in local_var_params or
                local_var_params['audio_uuid'] is None):
            raise ApiValueError("Missing the required parameter `audio_uuid` when calling `get_decode_result`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_uuid' in local_var_params:
            path_params['project_uuid'] = local_var_params['project_uuid']  # noqa: E501
        if 'training_version' in local_var_params:
            path_params['training_version'] = local_var_params['training_version']  # noqa: E501
        if 'audio_uuid' in local_var_params:
            path_params['audio_uuid'] = local_var_params['audio_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/project/{project_uuid}/training/{training_version}/decode/{audio_uuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DecodeAudio',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_decode_session(self, project_uuid, training_version, session_uuid, **kwargs):  # noqa: E501
        """Get a decode session  # noqa: E501

        Gets a specified session  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_decode_session(project_uuid, training_version, session_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project_uuid: UUID of the project (required)
        :param int training_version: Training version of the project (required)
        :param str session_uuid: UUID of the session (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DecodeSession
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_decode_session_with_http_info(project_uuid, training_version, session_uuid, **kwargs)  # noqa: E501

    def get_decode_session_with_http_info(self, project_uuid, training_version, session_uuid, **kwargs):  # noqa: E501
        """Get a decode session  # noqa: E501

        Gets a specified session  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_decode_session_with_http_info(project_uuid, training_version, session_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project_uuid: UUID of the project (required)
        :param int training_version: Training version of the project (required)
        :param str session_uuid: UUID of the session (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DecodeSession, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['project_uuid', 'training_version', 'session_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_decode_session" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project_uuid' is set
        if ('project_uuid' not in local_var_params or
                local_var_params['project_uuid'] is None):
            raise ApiValueError("Missing the required parameter `project_uuid` when calling `get_decode_session`")  # noqa: E501
        # verify the required parameter 'training_version' is set
        if ('training_version' not in local_var_params or
                local_var_params['training_version'] is None):
            raise ApiValueError("Missing the required parameter `training_version` when calling `get_decode_session`")  # noqa: E501
        # verify the required parameter 'session_uuid' is set
        if ('session_uuid' not in local_var_params or
                local_var_params['session_uuid'] is None):
            raise ApiValueError("Missing the required parameter `session_uuid` when calling `get_decode_session`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_uuid' in local_var_params:
            path_params['project_uuid'] = local_var_params['project_uuid']  # noqa: E501
        if 'training_version' in local_var_params:
            path_params['training_version'] = local_var_params['training_version']  # noqa: E501
        if 'session_uuid' in local_var_params:
            path_params['session_uuid'] = local_var_params['session_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/project/{project_uuid}/training/{training_version}/decode/session/{session_uuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DecodeSession',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_decodings(self, project_uuid, training_version, **kwargs):  # noqa: E501
        """List of all decodings  # noqa: E501

        Returns a list of all decodings for this training version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_decodings(project_uuid, training_version, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project_uuid: UUID of the project (required)
        :param int training_version: Training version of the project (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[DecodeAudio]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_decodings_with_http_info(project_uuid, training_version, **kwargs)  # noqa: E501

    def get_decodings_with_http_info(self, project_uuid, training_version, **kwargs):  # noqa: E501
        """List of all decodings  # noqa: E501

        Returns a list of all decodings for this training version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_decodings_with_http_info(project_uuid, training_version, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project_uuid: UUID of the project (required)
        :param int training_version: Training version of the project (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[DecodeAudio], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['project_uuid', 'training_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_decodings" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project_uuid' is set
        if ('project_uuid' not in local_var_params or
                local_var_params['project_uuid'] is None):
            raise ApiValueError("Missing the required parameter `project_uuid` when calling `get_decodings`")  # noqa: E501
        # verify the required parameter 'training_version' is set
        if ('training_version' not in local_var_params or
                local_var_params['training_version'] is None):
            raise ApiValueError("Missing the required parameter `training_version` when calling `get_decodings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_uuid' in local_var_params:
            path_params['project_uuid'] = local_var_params['project_uuid']  # noqa: E501
        if 'training_version' in local_var_params:
            path_params['training_version'] = local_var_params['training_version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/project/{project_uuid}/training/{training_version}/decode', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DecodeAudio]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def start_decode(self, project_uuid, training_version, session_uuid, **kwargs):  # noqa: E501
        """Commits the decode session for decoding  # noqa: E501

        Enqueue the currently active session for decoding  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_decode(project_uuid, training_version, session_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project_uuid: UUID of the project (required)
        :param int training_version: Training version of the project (required)
        :param str session_uuid: UUID of the session (required)
        :param CallbackObject callback_object: Callbackobject that gets executed after process
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DecodeSession
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.start_decode_with_http_info(project_uuid, training_version, session_uuid, **kwargs)  # noqa: E501

    def start_decode_with_http_info(self, project_uuid, training_version, session_uuid, **kwargs):  # noqa: E501
        """Commits the decode session for decoding  # noqa: E501

        Enqueue the currently active session for decoding  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_decode_with_http_info(project_uuid, training_version, session_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project_uuid: UUID of the project (required)
        :param int training_version: Training version of the project (required)
        :param str session_uuid: UUID of the session (required)
        :param CallbackObject callback_object: Callbackobject that gets executed after process
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DecodeSession, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['project_uuid', 'training_version', 'session_uuid', 'callback_object']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start_decode" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project_uuid' is set
        if ('project_uuid' not in local_var_params or
                local_var_params['project_uuid'] is None):
            raise ApiValueError("Missing the required parameter `project_uuid` when calling `start_decode`")  # noqa: E501
        # verify the required parameter 'training_version' is set
        if ('training_version' not in local_var_params or
                local_var_params['training_version'] is None):
            raise ApiValueError("Missing the required parameter `training_version` when calling `start_decode`")  # noqa: E501
        # verify the required parameter 'session_uuid' is set
        if ('session_uuid' not in local_var_params or
                local_var_params['session_uuid'] is None):
            raise ApiValueError("Missing the required parameter `session_uuid` when calling `start_decode`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_uuid' in local_var_params:
            path_params['project_uuid'] = local_var_params['project_uuid']  # noqa: E501
        if 'training_version' in local_var_params:
            path_params['training_version'] = local_var_params['training_version']  # noqa: E501
        if 'session_uuid' in local_var_params:
            path_params['session_uuid'] = local_var_params['session_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'callback_object' in local_var_params:
            body_params = local_var_params['callback_object']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/project/{project_uuid}/training/{training_version}/decode/session/{session_uuid}/commit', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DecodeSession',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unassign_audio_to_current_session(self, project_uuid, training_version, audio_uuid, **kwargs):  # noqa: E501
        """Unassign Audio to decoding session  # noqa: E501

        Unassign audio to current decoding session  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unassign_audio_to_current_session(project_uuid, training_version, audio_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project_uuid: UUID of the project (required)
        :param int training_version: Training version of the project (required)
        :param str audio_uuid: UUID of the audio (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.unassign_audio_to_current_session_with_http_info(project_uuid, training_version, audio_uuid, **kwargs)  # noqa: E501

    def unassign_audio_to_current_session_with_http_info(self, project_uuid, training_version, audio_uuid, **kwargs):  # noqa: E501
        """Unassign Audio to decoding session  # noqa: E501

        Unassign audio to current decoding session  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unassign_audio_to_current_session_with_http_info(project_uuid, training_version, audio_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project_uuid: UUID of the project (required)
        :param int training_version: Training version of the project (required)
        :param str audio_uuid: UUID of the audio (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['project_uuid', 'training_version', 'audio_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unassign_audio_to_current_session" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project_uuid' is set
        if ('project_uuid' not in local_var_params or
                local_var_params['project_uuid'] is None):
            raise ApiValueError("Missing the required parameter `project_uuid` when calling `unassign_audio_to_current_session`")  # noqa: E501
        # verify the required parameter 'training_version' is set
        if ('training_version' not in local_var_params or
                local_var_params['training_version'] is None):
            raise ApiValueError("Missing the required parameter `training_version` when calling `unassign_audio_to_current_session`")  # noqa: E501
        # verify the required parameter 'audio_uuid' is set
        if ('audio_uuid' not in local_var_params or
                local_var_params['audio_uuid'] is None):
            raise ApiValueError("Missing the required parameter `audio_uuid` when calling `unassign_audio_to_current_session`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_uuid' in local_var_params:
            path_params['project_uuid'] = local_var_params['project_uuid']  # noqa: E501
        if 'training_version' in local_var_params:
            path_params['training_version'] = local_var_params['training_version']  # noqa: E501
        if 'audio_uuid' in local_var_params:
            path_params['audio_uuid'] = local_var_params['audio_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/project/{project_uuid}/training/{training_version}/decode/{audio_uuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_audio(self, upfile, **kwargs):  # noqa: E501
        """Uploads audio  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_audio(upfile, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param file upfile: File object that needs to be uploaded (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Audio
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.upload_audio_with_http_info(upfile, **kwargs)  # noqa: E501

    def upload_audio_with_http_info(self, upfile, **kwargs):  # noqa: E501
        """Uploads audio  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_audio_with_http_info(upfile, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param file upfile: File object that needs to be uploaded (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Audio, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['upfile']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_audio" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'upfile' is set
        if ('upfile' not in local_var_params or
                local_var_params['upfile'] is None):
            raise ApiValueError("Missing the required parameter `upfile` when calling `upload_audio`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'upfile' in local_var_params:
            local_var_files['upfile'] = local_var_params['upfile']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/audio', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Audio',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
