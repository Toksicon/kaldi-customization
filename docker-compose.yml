version: '3.2'

services:
  kaldi-worker:
    build: ./worker/kaldi-worker
    networks:
      - backend
    restart: always
    depends_on:
      - redis
    
  text-prep-worker:
    build: ./worker/text-preparation-worker
    networks:
      - backend
    volumes:
      - type: bind
        source: ./dfs/texts/in
        target: /text_prep_worker/in
      - type: bind
        source: ./dfs/texts/out
        target: /text_prep_worker/out
    restart: always
    depends_on:
      - redis
  
  data-preparation-worker:
    build: ./worker/data-preparation-worker
    networks:
      - backend
    volumes:
      - type: bind
        source: ./dfs/texts/in
        target: /data_prep_worker/in
      - type: bind
        source: ./dfs/texts/out
        target: /data_prep_worker/out
    restart: always
    depends_on:
      - redis

  redis:
    image: "redis:alpine"
    ports:
      - 6380:6379
    command: redis-server --requirepass kalditproject
    networks:
      - backend
    restart: always

  minio:
    image: "minio/minio"
    volumes:
      - ./dfs/data:/data
      - ./config/.minio:/root/.minio
    ports:
      - 9001:9000
    command: server /data
    environment:
      MINIO_ACCESS_KEY: AKIAIOSFODNN7EXAMPLE
      MINIO_SECRET_KEY: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
    networks:
      - backend
    restart: always

  db:
    image: "mariadb"
    ports:
      - 3307:3306
    command:
      - --interactive_timeout=28800
    environment:
      MYSQL_ROOT_PASSWORD: kalditproject
      MYSQL_USER: api
      MYSQL_PASSWORD: api-server-password
      MYSQL_DATABASE: api
    networks:
      - frontend
    restart: always

  proxy:
    image: "nginx:alpine"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - 8080:80
    networks:
      - frontend
    restart: always
    depends_on:
      - api
      - web

  api:
    build: ./server/api
    networks:
      - frontend
      - backend
    volumes:
      - type: bind
        source: ./dfs/asr
        target: /www/asr
      - type: bind
        source: ./dfs/texts
        target: /www/texts
    restart: always
    depends_on:
      - db
      - redis

  web:
    build: ./server/web
    networks:
      - frontend
    restart: always
    depends_on:
      - api

networks:
  frontend:
  backend:
