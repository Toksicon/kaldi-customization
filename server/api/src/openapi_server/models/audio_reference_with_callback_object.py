# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class AudioReferenceWithCallbackObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audio_uuid=None, callback=None):  # noqa: E501
        """AudioReferenceWithCallbackObject - a model defined in OpenAPI

        :param audio_uuid: The audio_uuid of this AudioReferenceWithCallbackObject.  # noqa: E501
        :type audio_uuid: str
        :param callback: The callback of this AudioReferenceWithCallbackObject.  # noqa: E501
        :type callback: str
        """
        self.openapi_types = {
            'audio_uuid': str,
            'callback': str
        }

        self.attribute_map = {
            'audio_uuid': 'audio_uuid',
            'callback': 'callback'
        }

        self._audio_uuid = audio_uuid
        self._callback = callback

    @classmethod
    def from_dict(cls, dikt) -> 'AudioReferenceWithCallbackObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AudioReferenceWithCallbackObject of this AudioReferenceWithCallbackObject.  # noqa: E501
        :rtype: AudioReferenceWithCallbackObject
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audio_uuid(self):
        """Gets the audio_uuid of this AudioReferenceWithCallbackObject.

        UUID of the audio file  # noqa: E501

        :return: The audio_uuid of this AudioReferenceWithCallbackObject.
        :rtype: str
        """
        return self._audio_uuid

    @audio_uuid.setter
    def audio_uuid(self, audio_uuid):
        """Sets the audio_uuid of this AudioReferenceWithCallbackObject.

        UUID of the audio file  # noqa: E501

        :param audio_uuid: The audio_uuid of this AudioReferenceWithCallbackObject.
        :type audio_uuid: str
        """
        if audio_uuid is None:
            raise ValueError("Invalid value for `audio_uuid`, must not be `None`")  # noqa: E501

        self._audio_uuid = audio_uuid

    @property
    def callback(self):
        """Gets the callback of this AudioReferenceWithCallbackObject.

        Callback URL when decoding finished  # noqa: E501

        :return: The callback of this AudioReferenceWithCallbackObject.
        :rtype: str
        """
        return self._callback

    @callback.setter
    def callback(self, callback):
        """Sets the callback of this AudioReferenceWithCallbackObject.

        Callback URL when decoding finished  # noqa: E501

        :param callback: The callback of this AudioReferenceWithCallbackObject.
        :type callback: str
        """

        self._callback = callback
