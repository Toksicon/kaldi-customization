# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.decode_audio import DecodeAudio
from openapi_server.models.decode_session_status import DecodeSessionStatus
from openapi_server import util

from openapi_server.models.decode_audio import DecodeAudio  # noqa: E501
from openapi_server.models.decode_session_status import DecodeSessionStatus  # noqa: E501

class DecodeSession(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, session_uuid=None, creation_timestamp=None, status=None, decodings=None):  # noqa: E501
        """DecodeSession - a model defined in OpenAPI

        :param session_uuid: The session_uuid of this DecodeSession.  # noqa: E501
        :type session_uuid: str
        :param creation_timestamp: The creation_timestamp of this DecodeSession.  # noqa: E501
        :type creation_timestamp: datetime
        :param status: The status of this DecodeSession.  # noqa: E501
        :type status: DecodeSessionStatus
        :param decodings: The decodings of this DecodeSession.  # noqa: E501
        :type decodings: List[DecodeAudio]
        """
        self.openapi_types = {
            'session_uuid': str,
            'creation_timestamp': datetime,
            'status': DecodeSessionStatus,
            'decodings': List[DecodeAudio]
        }

        self.attribute_map = {
            'session_uuid': 'session_uuid',
            'creation_timestamp': 'creation_timestamp',
            'status': 'status',
            'decodings': 'decodings'
        }

        self._session_uuid = session_uuid
        self._creation_timestamp = creation_timestamp
        self._status = status
        self._decodings = decodings

    @classmethod
    def from_dict(cls, dikt) -> 'DecodeSession':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DecodeSession of this DecodeSession.  # noqa: E501
        :rtype: DecodeSession
        """
        return util.deserialize_model(dikt, cls)

    @property
    def session_uuid(self):
        """Gets the session_uuid of this DecodeSession.


        :return: The session_uuid of this DecodeSession.
        :rtype: str
        """
        return self._session_uuid

    @session_uuid.setter
    def session_uuid(self, session_uuid):
        """Sets the session_uuid of this DecodeSession.


        :param session_uuid: The session_uuid of this DecodeSession.
        :type session_uuid: str
        """

        self._session_uuid = session_uuid

    @property
    def creation_timestamp(self):
        """Gets the creation_timestamp of this DecodeSession.


        :return: The creation_timestamp of this DecodeSession.
        :rtype: datetime
        """
        return self._creation_timestamp

    @creation_timestamp.setter
    def creation_timestamp(self, creation_timestamp):
        """Sets the creation_timestamp of this DecodeSession.


        :param creation_timestamp: The creation_timestamp of this DecodeSession.
        :type creation_timestamp: datetime
        """

        self._creation_timestamp = creation_timestamp

    @property
    def status(self):
        """Gets the status of this DecodeSession.


        :return: The status of this DecodeSession.
        :rtype: DecodeSessionStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DecodeSession.


        :param status: The status of this DecodeSession.
        :type status: DecodeSessionStatus
        """

        self._status = status

    @property
    def decodings(self):
        """Gets the decodings of this DecodeSession.


        :return: The decodings of this DecodeSession.
        :rtype: List[DecodeAudio]
        """
        return self._decodings

    @decodings.setter
    def decodings(self, decodings):
        """Sets the decodings of this DecodeSession.


        :param decodings: The decodings of this DecodeSession.
        :type decodings: List[DecodeAudio]
        """

        self._decodings = decodings
