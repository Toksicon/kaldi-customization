# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.acoustic_model_type import AcousticModelType
from openapi_server.models.language import Language
from openapi_server import util

from openapi_server.models.acoustic_model_type import AcousticModelType  # noqa: E501
from openapi_server.models.language import Language  # noqa: E501

class AcousticModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, language=None, model_type=None, uuid=None):  # noqa: E501
        """AcousticModel - a model defined in OpenAPI

        :param id: The id of this AcousticModel.  # noqa: E501
        :type id: int
        :param name: The name of this AcousticModel.  # noqa: E501
        :type name: str
        :param language: The language of this AcousticModel.  # noqa: E501
        :type language: Language
        :param model_type: The model_type of this AcousticModel.  # noqa: E501
        :type model_type: AcousticModelType
        :param uuid: The uuid of this AcousticModel.  # noqa: E501
        :type uuid: str
        """
        self.openapi_types = {
            'id': int,
            'name': str,
            'language': Language,
            'model_type': AcousticModelType,
            'uuid': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'language': 'language',
            'model_type': 'model_type',
            'uuid': 'uuid'
        }

        self._id = id
        self._name = name
        self._language = language
        self._model_type = model_type
        self._uuid = uuid

    @classmethod
    def from_dict(cls, dikt) -> 'AcousticModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AcousticModel of this AcousticModel.  # noqa: E501
        :rtype: AcousticModel
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this AcousticModel.


        :return: The id of this AcousticModel.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AcousticModel.


        :param id: The id of this AcousticModel.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this AcousticModel.


        :return: The name of this AcousticModel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AcousticModel.


        :param name: The name of this AcousticModel.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def language(self):
        """Gets the language of this AcousticModel.


        :return: The language of this AcousticModel.
        :rtype: Language
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this AcousticModel.


        :param language: The language of this AcousticModel.
        :type language: Language
        """
        if language is None:
            raise ValueError("Invalid value for `language`, must not be `None`")  # noqa: E501

        self._language = language

    @property
    def model_type(self):
        """Gets the model_type of this AcousticModel.


        :return: The model_type of this AcousticModel.
        :rtype: AcousticModelType
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type):
        """Sets the model_type of this AcousticModel.


        :param model_type: The model_type of this AcousticModel.
        :type model_type: AcousticModelType
        """
        if model_type is None:
            raise ValueError("Invalid value for `model_type`, must not be `None`")  # noqa: E501

        self._model_type = model_type

    @property
    def uuid(self):
        """Gets the uuid of this AcousticModel.


        :return: The uuid of this AcousticModel.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this AcousticModel.


        :param uuid: The uuid of this AcousticModel.
        :type uuid: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid
