# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.resource import Resource
from openapi_server.models.training_status import TrainingStatus
from openapi_server import util

from openapi_server.models.resource import Resource  # noqa: E501
from openapi_server.models.training_status import TrainingStatus  # noqa: E501

class Training(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, version=None, creation_timestamp=None, status=None, resources=None):  # noqa: E501
        """Training - a model defined in OpenAPI

        :param version: The version of this Training.  # noqa: E501
        :type version: int
        :param creation_timestamp: The creation_timestamp of this Training.  # noqa: E501
        :type creation_timestamp: datetime
        :param status: The status of this Training.  # noqa: E501
        :type status: TrainingStatus
        :param resources: The resources of this Training.  # noqa: E501
        :type resources: List[Resource]
        """
        self.openapi_types = {
            'version': int,
            'creation_timestamp': datetime,
            'status': TrainingStatus,
            'resources': List[Resource]
        }

        self.attribute_map = {
            'version': 'version',
            'creation_timestamp': 'creation_timestamp',
            'status': 'status',
            'resources': 'resources'
        }

        self._version = version
        self._creation_timestamp = creation_timestamp
        self._status = status
        self._resources = resources

    @classmethod
    def from_dict(cls, dikt) -> 'Training':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Training of this Training.  # noqa: E501
        :rtype: Training
        """
        return util.deserialize_model(dikt, cls)

    @property
    def version(self):
        """Gets the version of this Training.


        :return: The version of this Training.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Training.


        :param version: The version of this Training.
        :type version: int
        """

        self._version = version

    @property
    def creation_timestamp(self):
        """Gets the creation_timestamp of this Training.


        :return: The creation_timestamp of this Training.
        :rtype: datetime
        """
        return self._creation_timestamp

    @creation_timestamp.setter
    def creation_timestamp(self, creation_timestamp):
        """Sets the creation_timestamp of this Training.


        :param creation_timestamp: The creation_timestamp of this Training.
        :type creation_timestamp: datetime
        """

        self._creation_timestamp = creation_timestamp

    @property
    def status(self):
        """Gets the status of this Training.


        :return: The status of this Training.
        :rtype: TrainingStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Training.


        :param status: The status of this Training.
        :type status: TrainingStatus
        """

        self._status = status

    @property
    def resources(self):
        """Gets the resources of this Training.


        :return: The resources of this Training.
        :rtype: List[Resource]
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this Training.


        :param resources: The resources of this Training.
        :type resources: List[Resource]
        """

        self._resources = resources
