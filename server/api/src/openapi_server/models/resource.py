# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.file_status import FileStatus
from openapi_server.models.file_type import FileType
from openapi_server import util

from openapi_server.models.file_status import FileStatus  # noqa: E501
from openapi_server.models.file_type import FileType  # noqa: E501

class Resource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, status=None, file_type=None):  # noqa: E501
        """Resource - a model defined in OpenAPI

        :param name: The name of this Resource.  # noqa: E501
        :type name: str
        :param status: The status of this Resource.  # noqa: E501
        :type status: FileStatus
        :param file_type: The file_type of this Resource.  # noqa: E501
        :type file_type: FileType
        """
        self.openapi_types = {
            'name': str,
            'status': FileStatus,
            'file_type': FileType
        }

        self.attribute_map = {
            'name': 'name',
            'status': 'status',
            'file_type': 'file_type'
        }

        self._name = name
        self._status = status
        self._file_type = file_type

    @classmethod
    def from_dict(cls, dikt) -> 'Resource':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Resource of this Resource.  # noqa: E501
        :rtype: Resource
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Resource.


        :return: The name of this Resource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Resource.


        :param name: The name of this Resource.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def status(self):
        """Gets the status of this Resource.


        :return: The status of this Resource.
        :rtype: FileStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Resource.


        :param status: The status of this Resource.
        :type status: FileStatus
        """

        self._status = status

    @property
    def file_type(self):
        """Gets the file_type of this Resource.


        :return: The file_type of this Resource.
        :rtype: FileType
        """
        return self._file_type

    @file_type.setter
    def file_type(self, file_type):
        """Sets the file_type of this Resource.


        :param file_type: The file_type of this Resource.
        :type file_type: FileType
        """
        if file_type is None:
            raise ValueError("Invalid value for `file_type`, must not be `None`")  # noqa: E501

        self._file_type = file_type
