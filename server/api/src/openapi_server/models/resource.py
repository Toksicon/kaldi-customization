# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.resource_status import ResourceStatus
from openapi_server.models.resource_type import ResourceType
from openapi_server import util

from openapi_server.models.resource_status import ResourceStatus  # noqa: E501
from openapi_server.models.resource_type import ResourceType  # noqa: E501

class Resource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, uuid=None, name=None, status=None, resource_type=None, creation_timestamp=None):  # noqa: E501
        """Resource - a model defined in OpenAPI

        :param uuid: The uuid of this Resource.  # noqa: E501
        :type uuid: str
        :param name: The name of this Resource.  # noqa: E501
        :type name: str
        :param status: The status of this Resource.  # noqa: E501
        :type status: ResourceStatus
        :param resource_type: The resource_type of this Resource.  # noqa: E501
        :type resource_type: ResourceType
        :param creation_timestamp: The creation_timestamp of this Resource.  # noqa: E501
        :type creation_timestamp: datetime
        """
        self.openapi_types = {
            'uuid': str,
            'name': str,
            'status': ResourceStatus,
            'resource_type': ResourceType,
            'creation_timestamp': datetime
        }

        self.attribute_map = {
            'uuid': 'uuid',
            'name': 'name',
            'status': 'status',
            'resource_type': 'resource_type',
            'creation_timestamp': 'creation_timestamp'
        }

        self._uuid = uuid
        self._name = name
        self._status = status
        self._resource_type = resource_type
        self._creation_timestamp = creation_timestamp

    @classmethod
    def from_dict(cls, dikt) -> 'Resource':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Resource of this Resource.  # noqa: E501
        :rtype: Resource
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uuid(self):
        """Gets the uuid of this Resource.


        :return: The uuid of this Resource.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Resource.


        :param uuid: The uuid of this Resource.
        :type uuid: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    @property
    def name(self):
        """Gets the name of this Resource.


        :return: The name of this Resource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Resource.


        :param name: The name of this Resource.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def status(self):
        """Gets the status of this Resource.


        :return: The status of this Resource.
        :rtype: ResourceStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Resource.


        :param status: The status of this Resource.
        :type status: ResourceStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def resource_type(self):
        """Gets the resource_type of this Resource.


        :return: The resource_type of this Resource.
        :rtype: ResourceType
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this Resource.


        :param resource_type: The resource_type of this Resource.
        :type resource_type: ResourceType
        """
        if resource_type is None:
            raise ValueError("Invalid value for `resource_type`, must not be `None`")  # noqa: E501

        self._resource_type = resource_type

    @property
    def creation_timestamp(self):
        """Gets the creation_timestamp of this Resource.


        :return: The creation_timestamp of this Resource.
        :rtype: datetime
        """
        return self._creation_timestamp

    @creation_timestamp.setter
    def creation_timestamp(self, creation_timestamp):
        """Sets the creation_timestamp of this Resource.


        :param creation_timestamp: The creation_timestamp of this Resource.
        :type creation_timestamp: datetime
        """

        self._creation_timestamp = creation_timestamp
